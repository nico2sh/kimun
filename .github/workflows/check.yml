on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

name: test

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Windows Build
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: windows
            artifact_suffix: ""
            target_path: "windows/app"
            package-type: msi
          - name: MacOS Build x64
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: macos
            artifact_suffix: _intel
            target_path: "macos"
            package-type: dmg
          - name: MacOS Build arm64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact: macos
            artifact_suffix: _apple_silicon
            target_path: "macos"
            package-type: dmg
          - name: Linux Build
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: linux
            artifact_suffix: ""
            target_path: "linux/app"
            package-type: appimage
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Cache Dioxus CLI
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/dx
          key: ${{ runner.os }}-dx-0.6.3
          restore-keys: |
            ${{ runner.os }}-dx-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libxdo-dev \
            libssl-dev \
            pkg-config \
            build-essential

      #      - name: Use carbo binstall
      #        uses: cargo-bins/cargo-binstall@main
      #
      #      - name: Install Dioxus-CLI
      #        run: cargo binstall dioxus-cli --version 0.6.3 --force

      - name: Install Dioxus CLI
        uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli@0.6.3

      # - name: Check formatting
      #   run: cargo fmt --check

      - name: Run core tests
        run: cargo test --manifest-path core/Cargo.toml -- --test-threads 1

      - name: Run desk tests
        run: cargo test --manifest-path desktop/Cargo.toml -- --test-threads 1
